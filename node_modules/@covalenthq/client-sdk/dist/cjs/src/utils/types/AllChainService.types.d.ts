import { type Chain, type ChainID, type ChainName, type Nullable, type Quote } from "./Generic.types";
import { type Transaction } from "./TransactionService.types";
export type MultiChainTransaction = Transaction & {
    /** * The requested chain ID eg: `1`. */
    chain_id: ChainID;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: ChainName;
};
export type MultiChainMultiAddressTransactionsResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The the pagination cursor to get the previous page of results */
    cursor_before: string;
    /** * The the pagination cursor to get the next page of results */
    cursor_after: string;
    /** * The requested quote currency eg: `USD`. */
    quote_currency: Quote | "ETH" | "BTC";
    /** * List of response items. */
    items: MultiChainTransaction[];
}>;
export type GetMultiChainAndMultiAddressTransactionsParamOtps = Nullable<{
    /** * An array of the chain names or IDs to retrieve transactions from. Defaults to all foundational chains. */
    chains?: Chain[];
    /** * An array of addresses for which transactions are fetched. Does not support name resolution. */
    addresses?: string[];
    /** * Number of transactions to return per page, up to the default max of 100 items. */
    limit?: number;
    /** * Pagination cursor pointing to fetch transactions before a certain point. */
    before?: string;
    /** * Pagination cursor pointing to fetch transactions after a certain point. */
    after?: string;
    /** * Whether to include raw logs in the response. */
    withLogs?: boolean;
    /** * Whether to include decoded logs in the response. */
    withDecodedLogs?: boolean;
    /** * The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, `GBP`, "BTC" and "ETH". */
    quoteCurrency?: Quote | "BTC" | "ETH";
}>;
